"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import asyncio
import mimetypes
import os
import sys
from pathlib import Path

from decouple import Csv, config
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config(
    "SECRET_KEY",
    default="django-insecure-9i!5+efr3q)-=7aoir4p(d^m#3w@4_b-8&7b+1gjq*15pc0zw!",
)
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=True, cast=bool)
# allowed hosts that project would respond to them
ALLOWED_HOSTS = config("ALLOWED_HOSTS", default="", cast=Csv())
# csrf trusted origins
CSRF_TRUSTED_ORIGINS = config("CSRF_TRUSTED_ORIGINS", default="", cast=Csv())
# login url
LOGIN_URL = config("LOGIN_URL", default="/")
# check that we are in testing mode or not
TESTING = "test" in sys.argv or "PYTEST_VERSION" in os.environ
# debug toolbar status
SHOW_DEBUG_TOOLBAR = config("SHOW_DEBUG_TOOLBAR", default=True, cast=bool)

# Application definition

DJANGO_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.admindocs",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "modeltranslation",
    "rest_framework",
    "corsheaders",
    "django_extensions",
    "django_filters",
    "channels",
    "django_celery_results",
    "rosetta",
    "parsley",
]

LOCAL_APPS = [
    # shared application contains all base features
    "shared.infrastructure",
    # core application that has core functionalities
    "core.infrastructure",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "core.infrastructure.middlewares.locale.ForceIgnoreDefaultLanguageMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "core.infrastructure.middlewares.host.MultipleProxyMiddleware",
    "django.contrib.admindocs.middleware.XViewMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.i18n",
            ],
        },
    },
]

# configuration of wsgi and asgi
WSGI_APPLICATION = "config.wsgi.application"
ASGI_APPLICATION = "config.asgi.application"

# number of threads for threadpool in asgi webserver like daphne
# Optimized for high concurrency: increase thread pool for I/O operations
ASYNC_THREADS = config("ASYNC_THREADS", default=int(os.cpu_count() or 1) * 4, cast=int)

# configure eventloop policy for windows platform
if sys.platform == "win32" and hasattr(asyncio, "WindowsProactorEventLoopPolicy"):
    asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())


# Channel Layers Configuration
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DATABASE_NAME", "imps_new_framework_db"),
        "USER": os.environ.get("DATABASE_USER", "root"),
        "PASSWORD": os.environ.get("DATABASE_PASSWORD", "admin"),
        "HOST": os.environ.get("DATABASE_HOST", "localhost"),
        "PORT": os.environ.get("DATABASE_PORT", "6432"),  # PgBouncer port
        "OPTIONS": {
            # PgBouncer-specific options for high concurrency
            "application_name": "django_imps_framework",
            "connect_timeout": 10,  # Reduced timeout for faster failure detection
        },
        # Connection pooling settings optimized for PgBouncer
        "CONN_MAX_AGE": 0,  # Disable Django's connection pooling since PgBouncer handles it
        "CONN_HEALTH_CHECKS": True,
        # Additional settings for high concurrency
        "ATOMIC_REQUESTS": False,  # Disable for better performance with PgBouncer
    }
}

AUTH_USER_MODEL = "core_infrastructure.User"

# AUTHENTICATION_BACKENDS = [
#     "core.infrastructure.auth_backends.CachedModelBackend",
# ]

MIGRATIONS_HISTORY_PATH = config(
    "MIGRATIONS_HISTORY_PATH", default="migrations_history", cast=str
)
MIGRATION_MODULES = {}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = []


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGES = (("en", _("English")), ("fa", _("Persian")))

MODELTRANSLATION_LANGUAGES = ("fa", "en")
MODELTRANSLATION_FALLBACK_LANGUAGES = ("fa", "en")
MODELTRANSLATION_AUTO_POPULATE = False

ROSETTA_LANGUAGES = [("fa", _("Persian")), ("en", _("English"))]
ROSETTA_SHOW_AT_ADMIN_PANEL = True
ROSETTA_MESSAGES_PER_PAGE = 20
ROSETTA_ENABLE_TRANSLATION_SUGGESTIONS = True
ROSETTA_ACCESS_CONTROL_FUNCTION = lambda user: user.is_superuser

LANGUAGE_CODE = config("LANGUAGE_CODE", default="fa")
MULTILANGUAGE_URL_PREFIX = config("MULTILANGUAGE_URL_PREFIX", default=False, cast=bool)
TIME_ZONE = config("TIME_ZONE", default="UTC")
USE_I18N = config("USE_I18N", default=True, cast=bool)
USE_TZ = config("USE_TZ", default=True, cast=bool)


# Auto-discover locale paths for all local apps
def get_auto_locale_paths():
    """Automatically discover locale paths for all LOCAL_APPS"""
    locale_paths = []

    for app in LOCAL_APPS:
        # Convert app name to path (e.g., "core.infrastructure" -> "core")
        app_base = app.split(".")[0]
        locale_path = BASE_DIR / app_base / "locale"

        # Only add if the directory exists
        if locale_path.exists():
            locale_paths.append(str(locale_path))

    # Add config locale path if it exists
    config_locale_path = BASE_DIR / "config" / "locale"
    if config_locale_path.exists():
        locale_paths.append(str(config_locale_path))

    return locale_paths


LOCALE_PATHS = get_auto_locale_paths()


# Static files (CSS, JavaScript, Images)
STATIC_URL = config("STATIC_URL", default="/static/")
STATIC_ROOT = config(
    "STATIC_ROOT", default=os.path.join(BASE_DIR.parent, "cdn", "static")
)
STATICFILES_DIRS = [BASE_DIR / "static"]

# configure media
MEDIA_URL = config("MEDIA_URL", default="/media/")
MEDIA_ROOT = config("MEDIA_ROOT", default=os.path.join(BASE_DIR.parent, "cdn", "media"))

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

X_FRAME_OPTIONS = config("X_FRAME_OPTIONS", default="self")
mimetypes.add_type("application/javascript", ".js", True)

# Celery Configuration
CELERY_BROKER_URL = config("CELERY_BROKER_URL", default="redis://localhost:6379/0")
CELERY_RESULT_BACKEND = config("CELERY_RESULT_BACKEND", default="django-db")
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE

# Cache configuration for high performance
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": config(
            "CACHES_DEFAULT_REDIS_URL", default="redis://localhost:6379/0"
        ),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "IGNORE_EXCEPTIONS": True,
            "COMPRESSOR": "django_redis.compressors.zstd.ZStdCompressor",
        },
        # Additional optimizations for your scale:
        "CONNECTION_POOL_KWARGS": {
            "max_connections": 50,  # Handle 200 concurrent users
            "retry_on_timeout": True,
            "socket_connect_timeout": 5,
            "socket_timeout": 5,
        },
        # Serializer optimization for large JSON
        "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
        # Connection pooling for high concurrency
        "PARSER_CLASS": "redis.connection.HiredisParser",
        "KEY_PREFIX": "imps_framework",
        "TIMEOUT": config("CACHES_DEFAULT_REDIS_TIMEOUT", cast=int, default=300),
    },
    "sessions": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": config(
            "CACHES_SESSIONS_REDIS_URL", default="redis://localhost:6379/1"
        ),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "COMPRESSOR": "django_redis.compressors.lz4.Lz4Compressor",
        },
        "KEY_PREFIX": "imps_framework_session",
        "TIMEOUT": config("CACHES_SESSIONS_REDIS_TIMEOUT", cast=int, default=1800),
    },
}

# Security optimizations for production
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"

# File upload optimizations
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

# session settings
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "sessions"

# Logging configuration for production
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": "logs/django.log",
            "formatter": "verbose",
        },
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "uvicorn": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

os.makedirs("logs", exist_ok=True)

# debug toolbar configuration
if DEBUG and not TESTING:
    INSTALLED_APPS.append(
        "debug_toolbar",
    )
    MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")
    INTERNAL_IPS = ["127.0.0.1"]
    DEBUG_TOOLBAR_PANELS = [
        "debug_toolbar.panels.history.HistoryPanel",
        "debug_toolbar.panels.versions.VersionsPanel",
        "debug_toolbar.panels.timer.TimerPanel",
        "debug_toolbar.panels.settings.SettingsPanel",
        "debug_toolbar.panels.headers.HeadersPanel",
        "debug_toolbar.panels.request.RequestPanel",
        "debug_toolbar.panels.sql.SQLPanel",
        "debug_toolbar.panels.staticfiles.StaticFilesPanel",
        "debug_toolbar.panels.templates.TemplatesPanel",
        "debug_toolbar.panels.alerts.AlertsPanel",
        "debug_toolbar.panels.cache.CachePanel",
        "debug_toolbar.panels.signals.SignalsPanel",
        "debug_toolbar.panels.redirects.RedirectsPanel",
        "debug_toolbar.panels.profiling.ProfilingPanel",
    ]

    DEBUG_TOOLBAR_CONFIG = {"SHOW_TOOLBAR_CALLBACK": lambda request: SHOW_DEBUG_TOOLBAR}
